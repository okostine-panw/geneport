MTSBv2 (AWS):
  3.3:
    CloudType: "AWS"
    info: "\nCompliance standard: CIS v1.3.0 (AWS)\nSection: 3.3\nEnsure the S3 bucket used to store CloudTrail logs is not publicly accessible\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-s3api-get-bucket-acl' AND json.rule = ((((acl.grants[?(@.grantee=='AllUsers')] size > 0) or policyStatus.isPublic is true) and publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration does not exist) or ((acl.grants[?(@.grantee=='AllUsers')] size > 0) and ((publicAccessBlockConfiguration.ignorePublicAcls is false and accountLevelPublicAccessBlockConfiguration does not exist) or (publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false) or (publicAccessBlockConfiguration.ignorePublicAcls is false and accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false))) or (policyStatus.isPublic is true and ((publicAccessBlockConfiguration.restrictPublicBuckets is false and accountLevelPublicAccessBlockConfiguration does not exist) or (publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false) or (publicAccessBlockConfiguration.restrictPublicBuckets is false and accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false))))\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    #rql2: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-s3api-get-bucket-acl' as X; config from cloud.resource where api.name = 'aws-cloudtrail-describe-trails' as Y; filter'$.X.bucketName equals $.Y.s3BucketName'; show X;\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    display_on: "bucketName"
    API: "Native"
    Mandatory: "Yes"
  1.04:
    CloudType: "AWS"
    info: "\nEnsure no root user account access key exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-account-summary' AND json.rule='not AccountAccessKeysPresent equals 0'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "Yes"
  1.08:
    CloudType: "AWS"
    info: "\nEnsure IAM password policy requires minimum length of 14 or greater \n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-iam-get-account-password-policy' AND json.rule='isDefaultPolicy is true or minimumPasswordLength < 14 or minimumPasswordLength does not exist'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  1.09:
    CloudType: "AWS"
    info: "\nEnsure IAM password policy prevents password reuse\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-account-password-policy' AND json.rule='isDefaultPolicy is true or passwordReusePrevention equals null or passwordReusePrevention !isType Integer or passwordReusePrevention < 1'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  1.10:
    CloudType: "AWS"
    info: "\nEnsure multi-factor authentication (MFA) is enabled for all IAM users that have a console password\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule='password_enabled equals \"true\" and mfa_active is false'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "Yes"
  1.12:
    CloudType: "AWS"
    info: "\nEnsure credentials unused for 90 days or greater are disabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule = 'user does not equal <root_account> and (password_enabled equals \"true\" or access_key_1_active equals \"true\" or access_key_2_active equals \"true\" ) and _DateTime.ageInDays(user_creation_time) > 90 and (password_last_used equals N/A or password_last_used equals no_information or _DateTime.ageInDays(password_last_used) > 90) and (( access_key_1_active equals \"true\" and ((access_key_1_last_used_date equals N/A and (_DateTime.ageInDays(access_key_1_last_rotated) > 90 or access_key_1_last_rotated equals N/A)) or _DateTime.ageInDays(access_key_1_last_used_date) > 90)) or (access_key_2_active equals \"true\" and ((access_key_2_last_used_date equals N/A and (_DateTime.ageInDays(access_key_2_last_rotated) > 90 or access_key_2_last_rotated equals N/A)) or _DateTime.ageInDays(access_key_2_last_used_date) > 90)))'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "No"
  1.13:
    CloudType: "AWS"
    info: "\nEnsure there is only one active access key available for any single IAM user\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule = 'user does not equal <root_account> and access_key_1_active is true and access_key_2_active is true'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "No"
  1.14:
    CloudType: "AWS"
    info: "\nEnsure access keys are rotated every 365 days or less \n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule = 'user does not equal <root_account> and (access_key_1_active is true and access_key_1_last_rotated != N/A and _DateTime.ageInDays(access_key_1_last_rotated) > 365) or (access_key_2_active is true and access_key_2_last_rotated != N/A and _DateTime.ageInDays(access_key_2_last_rotated) > 365)'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "No"
  1.16:
    CloudType: "AWS"
    info: "\nEnsure IAM policies that allow full \"*:*\" administrative privileges are not attached\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-iam-get-policy-version' AND json.rule = document.Statement[?any(Action anyStartWith * and Resource equals * and Effect equals Allow)] exists and (policyArn exists and policyArn does not start with arn:aws:iam::aws:policy)	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "policyArn"
    API: "Custom"
    Mandatory: "Yes"
  1.17:
    CloudType: "AWS"
    info: "\nEnsure a support role has been created to manage incidents with AWS Support\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-iam-get-policy-version' AND json.rule = 'policyName equals AWSSupportAccess and policyArn contains arn:aws:iam::aws:policy/AWSSupportAccess and (isAttached is true and entities.policyRoles[*].roleId is not empty)' as X; count(X) equals 0	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "policyArn"
    API: "Custom"
    Mandatory: "No"
  1.20:
    CloudType: "AWS"
    info: "\nEnsure that S3 Buckets are configured with 'Block public access (bucket settings)'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-s3api-get-bucket-acl' AND json.rule = '(publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration does not exist) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.blockPublicAcls is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.blockPublicAcls is false)) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.ignorePublicAcls is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false)) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.blockPublicPolicy is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.blockPublicPolicy is false)) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.restrictPublicBuckets is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false))	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "bucketName"
    API: "Native"
    Mandatory: "No"
  2.1.1:
    CloudType: "AWS"
    info: "\nEnsure all S3 buckets employ encryption-at-rest\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name= 'aws-s3api-get-bucket-acl' AND json.rule = 'policyAvailable is true and denyUnencryptedUploadsPolicies[*] is empty and sseAlgorithm equals None'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "bucketName"
    API: "Native"
    Mandatory: "Yes"
  2.2.1:
    CloudType: "AWS"
    info: "\nEnsure EBS volume encryption is enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-ec2-describe-volumes' AND json.rule = encrypted is false	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  3.1:
    CloudType: "AWS"
    info: "\nEnsure CloudTrail is enabled in all regions\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name= 'aws-cloudtrail-describe-trails' AND json.rule = 'isMultiRegionTrail is true and includeGlobalServiceEvents is true' as X; config from cloud.resource where api.name= 'aws-cloudtrail-get-trail-status' AND json.rule = 'status.isLogging equals true' as Y; config from cloud.resource where api.name= 'aws-cloudtrail-get-event-selectors' AND json.rule = '(eventSelectors[*].readWriteType contains All and eventSelectors[*].includeManagementEvents equal ignore case true) or (advancedEventSelectors[*].fieldSelectors[*].equals contains 'Management' and advancedEventSelectors[*].fieldSelectors[*].field does not contain 'readOnly' and advancedEventSelectors[*].fieldSelectors[*].field does not contain 'eventSource')' as Z; filter '($.X.trailARN equals $.Z.trailARN) and ($.X.name equals $.Y.trail)'; show X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  3.3:
    CloudType: "AWS"
    info: "\nEnsure the S3 bucket used to store CloudTrail logs is not publicly accessible\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-s3api-get-bucket-acl' AND json.rule = '((((acl.grants[?(@.grantee=='AllUsers')] size > 0) or policyStatus.isPublic is true) and publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration does not exist) or ((acl.grants[?(@.grantee=='AllUsers')] size > 0) and ((publicAccessBlockConfiguration.ignorePublicAcls is false and accountLevelPublicAccessBlockConfiguration does not exist) or (publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false) or (publicAccessBlockConfiguration.ignorePublicAcls is false and accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false))) or (policyStatus.isPublic is true and ((publicAccessBlockConfiguration.restrictPublicBuckets is false and accountLevelPublicAccessBlockConfiguration does not exist) or (publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false) or (publicAccessBlockConfiguration.restrictPublicBuckets is false and accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false)))) as X; config from cloud.resource where api.name = 'aws-cloudtrail-describe-trails' as Y; filter'$.X.bucketName equals $.Y.s3BucketName'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "No"
  3.4:
    CloudType: "AWS"
    info: "\nEnsure CloudTrail trails are integrated with CloudWatch Logs\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-cloudtrail-describe-trails' AND json.rule = 'cloudWatchLogsRoleArn equals null or cloudWatchLogsRoleArn does not exist'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"

MTSBv2 (Azure):
  1.04:
    CloudType: "AWS"
    info: "\nEnsure no root user account access key exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-account-summary' AND json.rule='not AccountAccessKeysPresent equals 0'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "Yes"
  1.08:
    CloudType: "AWS"
    info: "\nEnsure IAM password policy requires minimum length of 14 or greater \n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-iam-get-account-password-policy' AND json.rule='isDefaultPolicy is true or minimumPasswordLength < 14 or minimumPasswordLength does not exist'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  1.09:
    CloudType: "AWS"
    info: "\nEnsure IAM password policy prevents password reuse\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-account-password-policy' AND json.rule='isDefaultPolicy is true or passwordReusePrevention equals null or passwordReusePrevention !isType Integer or passwordReusePrevention < 1'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  1.10:
    CloudType: "AWS"
    info: "\nEnsure multi-factor authentication (MFA) is enabled for all IAM users that have a console password\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule='password_enabled equals \"true\" and mfa_active is false'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "Yes"
  1.12:
    CloudType: "AWS"
    info: "\nEnsure credentials unused for 90 days or greater are disabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule = 'user does not equal <root_account> and (password_enabled equals \"true\" or access_key_1_active equals \"true\" or access_key_2_active equals \"true\" ) and _DateTime.ageInDays(user_creation_time) > 90 and (password_last_used equals N/A or password_last_used equals no_information or _DateTime.ageInDays(password_last_used) > 90) and (( access_key_1_active equals \"true\" and ((access_key_1_last_used_date equals N/A and (_DateTime.ageInDays(access_key_1_last_rotated) > 90 or access_key_1_last_rotated equals N/A)) or _DateTime.ageInDays(access_key_1_last_used_date) > 90)) or (access_key_2_active equals \"true\" and ((access_key_2_last_used_date equals N/A and (_DateTime.ageInDays(access_key_2_last_rotated) > 90 or access_key_2_last_rotated equals N/A)) or _DateTime.ageInDays(access_key_2_last_used_date) > 90)))'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "No"
  1.13:
    CloudType: "AWS"
    info: "\nEnsure there is only one active access key available for any single IAM user\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule = 'user does not equal <root_account> and access_key_1_active is true and access_key_2_active is true'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "No"
  1.14:
    CloudType: "AWS"
    info: "\nEnsure access keys are rotated every 365 days or less \n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' and api.name = 'aws-iam-get-credential-report' AND json.rule = 'user does not equal <root_account> and (access_key_1_active is true and access_key_1_last_rotated != N/A and _DateTime.ageInDays(access_key_1_last_rotated) > 365) or (access_key_2_active is true and access_key_2_last_rotated != N/A and _DateTime.ageInDays(access_key_2_last_rotated) > 365)'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Custom"
    Mandatory: "No"
  1.16:
    CloudType: "AWS"
    info: "\nEnsure IAM policies that allow full \"*:*\" administrative privileges are not attached\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-iam-get-policy-version' AND json.rule = document.Statement[?any(Action anyStartWith * and Resource equals * and Effect equals Allow)] exists and (policyArn exists and policyArn does not start with arn:aws:iam::aws:policy)	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "policyArn"
    API: "Custom"
    Mandatory: "Yes"
  1.17:
    CloudType: "AWS"
    info: "\nEnsure a support role has been created to manage incidents with AWS Support\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-iam-get-policy-version' AND json.rule = 'policyName equals AWSSupportAccess and policyArn contains arn:aws:iam::aws:policy/AWSSupportAccess and (isAttached is true and entities.policyRoles[*].roleId is not empty)' as X; count(X) equals 0	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "policyArn"
    API: "Custom"
    Mandatory: "No"
  1.20:
    CloudType: "AWS"
    info: "\nEnsure that S3 Buckets are configured with 'Block public access (bucket settings)'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-s3api-get-bucket-acl' AND json.rule = '(publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration does not exist) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.blockPublicAcls is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.blockPublicAcls is false)) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.ignorePublicAcls is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false)) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.blockPublicPolicy is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.blockPublicPolicy is false)) or ((publicAccessBlockConfiguration does not exist or publicAccessBlockConfiguration.restrictPublicBuckets is false) and (accountLevelPublicAccessBlockConfiguration does not exist or accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false))	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "bucketName"
    API: "Native"
    Mandatory: "No"
  2.1.1:
    CloudType: "AWS"
    info: "\nEnsure all S3 buckets employ encryption-at-rest\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name= 'aws-s3api-get-bucket-acl' AND json.rule = 'policyAvailable is true and denyUnencryptedUploadsPolicies[*] is empty and sseAlgorithm equals None'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "bucketName"
    API: "Native"
    Mandatory: "Yes"
  2.2.1:
    CloudType: "AWS"
    info: "\nEnsure EBS volume encryption is enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-ec2-describe-volumes' AND json.rule = encrypted is false	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  3.1:
    CloudType: "AWS"
    info: "\nEnsure CloudTrail is enabled in all regions\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name= 'aws-cloudtrail-describe-trails' AND json.rule = 'isMultiRegionTrail is true and includeGlobalServiceEvents is true' as X; config from cloud.resource where api.name= 'aws-cloudtrail-get-trail-status' AND json.rule = 'status.isLogging equals true' as Y; config from cloud.resource where api.name= 'aws-cloudtrail-get-event-selectors' AND json.rule = '(eventSelectors[*].readWriteType contains All and eventSelectors[*].includeManagementEvents equal ignore case true) or (advancedEventSelectors[*].fieldSelectors[*].equals contains 'Management' and advancedEventSelectors[*].fieldSelectors[*].field does not contain 'readOnly' and advancedEventSelectors[*].fieldSelectors[*].field does not contain 'eventSource')' as Z; filter '($.X.trailARN equals $.Z.trailARN) and ($.X.name equals $.Y.trail)'; show X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
  3.3:
    CloudType: "AWS"
    info: "\nEnsure the S3 bucket used to store CloudTrail logs is not publicly accessible\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-s3api-get-bucket-acl' AND json.rule = '((((acl.grants[?(@.grantee=='AllUsers')] size > 0) or policyStatus.isPublic is true) and publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration does not exist) or ((acl.grants[?(@.grantee=='AllUsers')] size > 0) and ((publicAccessBlockConfiguration.ignorePublicAcls is false and accountLevelPublicAccessBlockConfiguration does not exist) or (publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false) or (publicAccessBlockConfiguration.ignorePublicAcls is false and accountLevelPublicAccessBlockConfiguration.ignorePublicAcls is false))) or (policyStatus.isPublic is true and ((publicAccessBlockConfiguration.restrictPublicBuckets is false and accountLevelPublicAccessBlockConfiguration does not exist) or (publicAccessBlockConfiguration does not exist and accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false) or (publicAccessBlockConfiguration.restrictPublicBuckets is false and accountLevelPublicAccessBlockConfiguration.restrictPublicBuckets is false)))) as X; config from cloud.resource where api.name = 'aws-cloudtrail-describe-trails' as Y; filter'$.X.bucketName equals $.Y.s3BucketName'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "bucketName"
    API: "Custom"
    Mandatory: "No"
  3.4:
    CloudType: "AWS"
    info: "\nEnsure CloudTrail trails are integrated with CloudWatch Logs\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'aws' AND api.name = 'aws-cloudtrail-describe-trails' AND json.rule = 'cloudWatchLogsRoleArn equals null or cloudWatchLogsRoleArn does not exist'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "arn"
    API: "Native"
    Mandatory: "No"
MTSBv2 (Azure):
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Event Hub should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-event-hub-namespace' AND json.rule = type equals 'Microsoft.EventHub/Namespaces' as X; config from cloud.resource where api.name = 'azure-event-hub-namespace-diagnostic-settings' AND json.rule = ((properties.storageAccountId exists and properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (properties.logs[*].enabled all false))as Y; filter '$.Y.id contains $.X.name'; show Y;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Event Hub should exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-event-hub-namespace' AND json.rule = type equals 'Microsoft.EventHub/Namespaces' as X; config from cloud.resource where api.name = 'azure-event-hub-namespace-diagnostic-settings' as Y; filter 'not($.Y.id contains $.X.name)'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  2.11:
    CloudType: "Azure"
    info: "\nEnsure that 'Automatic provisioning of monitoring agent' is set to 'On'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-security-center-settings' AND json.rule = 'autoProvisioningSettings[*].name equals default and (autoProvisioningSettings[*].properties.autoProvision equals Off or autoProvisioningSettings[*] does not exist)'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  2.13:
    CloudType: "Azure"
    info: "\nEnsure 'Additional email addresses' is configured with a security contact email\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-security-center-settings' AND json.rule = (securityContacts is empty or securityContacts[?any(properties.email is empty)] exists)	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  2.14:
    CloudType: "Azure"
    info: "\nEnsure that 'Notify about alerts with the following severity' is set to 'High'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-security-center-settings' AND json.rule = (securityContacts is empty or securityContacts[?any(properties.email is empty)] exists or securityContacts[?any(properties.alertsToAdmins does not equal 'On')] exists or securityContacts[?any(properties.alertNotifications does not equal 'On')] exists)	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  3.1:
    CloudType: "Azure"
    info: "\nEnsure that 'Secure transfer required' is set to 'Enabled'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-storage-account-list' AND json.rule = properties.supportsHttpsTrafficOnly !exists or properties.supportsHttpsTrafficOnly is false	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "Yes"
  3.8:
    CloudType: "Azure"
    info: "\nEnsure soft delete is enabled for Azure Storage\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-storage-account-list' AND json.rule = deleteRetentionPolicy.blob.enabled is false or deleteRetentionPolicy.blob.days less than 2	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.1.1:
    CloudType: "Azure"
    info: "\nEnsure that 'Auditing' is set to 'On'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-sql-server-list' AND json.rule =  '$.serverBlobAuditingPolicy.properties.retentionDays does not exist or $.serverBlobAuditingPolicy.properties.state equals Disabled'\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.1.2:
    CloudType: "Azure"
    info: "\nEnsure that 'Data encryption' is set to 'On' on a SQL Database\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-sql-db-list' AND json.rule = transparentDataEncryption is false	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "Yes"
  4.1.3:
    CloudType: "Azure"
    info: "\nEnsure that 'Auditing' Retention is 'greater than 90 days'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-sql-server-list' AND json.rule = serverBlobAuditingPolicy.properties.state equal ignore case Enabled and serverBlobAuditingPolicy.properties.storageEndpoint is not empty and (serverBlobAuditingPolicy.properties.retentionDays does not equal 0 and serverBlobAuditingPolicy.properties.retentionDays < 90)	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.3.1:
    CloudType: "Azure"
    info: "\nEnsure 'Enforce SSL connection' is set to 'ENABLED' for PostgreSQL Database Server\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-postgresql-server' AND json.rule = 'properties.sslEnforcement contains Disabled'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.3.2:
    CloudType: "Azure"
    info: "\nEnsure 'Enforce SSL connection' is set to 'ENABLED' for MySQL Database Server\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-mysql-server' AND json.rule = 'properties.sslEnforcement does not equal Enabled'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.3.4:
    CloudType: "Azure"
    info: "\nEnsure server parameter 'log_connections' is set to 'ON' for PostgreSQL Database Server\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-postgresql-server' AND json.rule = 'configurations.value[?(@.name=='log_connections')].properties.value equals OFF or configurations.value[?(@.name=='log_connections')].properties.value equals off'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.3.5:
    CloudType: "Azure"
    info: "\nEnsure server parameter 'log_disconnections' is set to 'ON' for PostgreSQL Database Server\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-postgresql-server' AND json.rule = 'configurations.value[?(@.name=='log_disconnections')].properties.value equals OFF or configurations.value[?(@.name=='log_disconnections')].properties.value equals off'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.3.6:
    CloudType: "Azure"
    info: "\nEnsure server parameter 'connection_throttling' is set to 'ON' for PostgreSQL Database Server\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-postgresql-server' AND json.rule = 'configurations.value[?(@.name=='connection_throttling')].properties.value equals OFF or configurations.value[?(@.name=='connection_throttling')].properties.value equals off'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  4.3.7:
    CloudType: "Azure"
    info: "\nEnsure server parameter 'log_retention_days' is greater than 3 days for PostgreSQL Database Server\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-postgresql-server' AND json.rule = 'configurations.value[?(@.name=='log_retention_days')].properties.value less than 4'\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.1.5:
    CloudType: "Azure"
    info: "\nEnsure that logging for Azure KeyVault is 'Enabled'\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-key-vault-list' AND json.rule = (diagnosticSettings[*].value[*].properties.storageAccountId exists and diagnosticSettings[*].value[*].properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (diagnosticSettings.value[*].properties.logs[*].enabled all false) 	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.2.3:
    CloudType: "Azure"
    info: "\nEnsure that Activity Log Alert exists for Create or Update Network Security Group\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-activity-log-alerts' AND json.rule = 'location equals Global and properties.enabled equals true and properties.scopes[*] does not contain resourceGroups and properties.condition.allOf[?(@.field=='operationName')].equals equals Microsoft.Network/networkSecurityGroups/write' as X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.2.4:
    CloudType: "Azure"
    info: "\nEnsure that Activity Log Alert exists for Delete Network Security Group\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-activity-log-alerts' AND json.rule = 'location equals Global and properties.enabled equals true and properties.scopes[*] does not contain resourceGroups and properties.condition.allOf[?(@.field=='operationName')].equals equals Microsoft.Network/networkSecurityGroups/delete' as X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.2.7:
    CloudType: "Azure"
    info: "\nEnsure that Activity Log Alert exists for Create or Update Security Solution\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-activity-log-alerts' AND json.rule = 'location equals Global and properties.enabled equals true and properties.scopes[*] does not contain resourceGroups and properties.condition.allOf[?(@.field=='operationName')].equals equals Microsoft.Security/securitySolutions/write' as X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.2.8:
    CloudType: "Azure"
    info: "\nEnsure that Activity Log Alert exists for Delete Security Solution\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-activity-log-alerts' AND json.rule = 'location equals Global and properties.enabled equals true and properties.scopes[*] does not contain resourceGroups and properties.condition.allOf[?(@.field=='operationName')].equals equals Microsoft.Security/securitySolutions/delete' as X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.2.9:
    CloudType: "Azure"
    info: "\nEnsure that Activity Log Alert exists for Create or Update or Delete SQL Server Firewall Rule (2)\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-activity-log-alerts' AND json.rule = 'location equals Global and properties.enabled equals true and properties.scopes[*] does not contain resourceGroups and properties.condition.allOf[?(@.field=='operationName')].equals equals Microsoft.Sql/servers/firewallRules/delete' as X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.2.9:
    CloudType: "Azure"
    info: "\nEnsure that Activity Log Alert exists for Create or Update or Delete SQL Server Firewall Rule (1)\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-activity-log-alerts' AND json.rule = 'location equals Global and properties.enabled equals true and properties.scopes[*] does not contain resourceGroups and properties.condition.allOf[?(@.field=='operationName')].equals equals Microsoft.Sql/servers/firewallRules/write' as X; count(X) less than 1	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  5.4:
    CloudType: "Azure"
    info: "\nEnsure logs in App Service should exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-app-service' AND json.rule = kind does not contain 'functionapp' and type equals 'Microsoft.Web/sites' as X; config from cloud.resource where api.name = 'azure-app-service-diagnostic-settings' as Y; filter 'not($.Y.id contains $.X.name)'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in App Services should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name = 'azure-app-service' and json.rule = kind does not contain 'functionapp' and type equals 'Microsoft.Web/sites' as X; config from cloud.resource where api.name = 'azure-app-service-diagnostic-settings' AND json.rule = ((properties.storageAccountId exists and properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (properties.logs[*].enabled all false)) as Y; filter '$.Y.id contains $.X.name'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Logic Apps should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name = 'azure-logic-app-workflow' AND json.rule = type equals 'Microsoft.Logic/workflows' as X; config from cloud.resource where api.name = 'azure-logic-app-workflow-diagnostic-settings' AND json.rule = ((properties.storageAccountId exists and properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (properties.logs[*].enabled all false)) as Y; filter '$.Y.id contains $.X.name'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Logic Apps should exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-logic-app-workflow' AND json.rule = type equals 'Microsoft.Logic/workflows' as X; config from cloud.resource where api.name = 'azure-logic-app-workflow-diagnostic-settings' as Y; filter 'not($.Y.id contains $.X.name)'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Azure Kubernetes should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-kubernetes-cluster' AND json.rule = type equals 'Microsoft.ContainerService/ManagedClusters' and ((diagnosticSettings[*].properties.storageAccountId exists and diagnosticSettings[*].properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (diagnosticSettings[*].properties.logs[*].enabled all false))	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Data Lake Store should exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name = 'azure-data-lake-store-gen1-account' AND json.rule = type equals 'Microsoft.DataLakeStore/accounts' as X; config from cloud.resource where api.name = 'azure-data-lake-store-gen1-diagnostic-settings' as Y; filter 'not($.Y.id contains $.X.name)'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Azure Data Lake Store should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name = 'azure-data-lake-store-gen1-account' and json.rule = type equals 'Microsoft.DataLakeStore/accounts' as X; config from cloud.resource where api.name = 'azure-data-lake-store-gen1-diagnostic-settings' AND json.rule = ((properties.storageAccountId exists and properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (properties.logs[*].enabled all false))as Y; filter '$.Y.id contains $.X.name'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Stream Analytics should exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-streamanalytics-streamingjobs' AND json.rule = type equals 'Microsoft.StreamAnalytics/streamingjobs' as X; config from cloud.resource where api.name = 'azure-streamanalytics-streamingjobs-diagnostic-settings' as Y; filter 'not($.Y.id contains $.X.name)'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Azure Stream Analytics should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name = 'azure-streamanalytics-streamingjobs' and json.rule = type equals 'Microsoft.StreamAnalytics/streamingjobs' as X; config from cloud.resource where api.name = 'azure-streamanalytics-streamingjobs-diagnostic-settings' AND json.rule = ((properties.storageAccountId exists and properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (properties.logs[*].enabled all false))as Y; filter '$.Y.id contains $.X.name'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Batch Account should exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-batch-account' AND json.rule = type equals 'Microsoft.Batch/batchAccounts' as X; config from cloud.resource where api.name = 'azure-batch-account-diagnostic-settings' as Y; filter 'not($.Y.id contains $.X.name)'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Batch Accounts should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-batch-account' and json.rule = type equals 'Microsoft.Batch/batchAccounts' as X; config from cloud.resource where api.name = 'azure-batch-account-diagnostic-settings' AND json.rule = ((properties.storageAccountId exists and properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (properties.logs[*].enabled all false)) as Y; filter '$.Y.id contains $.X.name'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Service Bus should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-service-bus-namespace' AND json.rule = type equals 'Microsoft.ServiceBus/Namespaces' and ((diagnosticSettings[*].properties.storageAccountId exists and diagnosticSettings[*].properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (diagnosticSettings[*].properties.logs[*].enabled all false))	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Iot Hubs should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-devices-iot-hub-resource' AND json.rule = type equals 'Microsoft.Devices/IotHubs' as X; config from cloud.resource where api.name = 'azure-devices-iot-hub-resource-diagnostic-settings' AND json.rule = ((properties.storageAccountId exists and properties.logs[?none( enabled is true and retentionPolicy.enabled is true and (retentionPolicy.days does not equal 0 or retentionPolicy.days less than 365))] exists) or (properties.logs[*].enabled all false))as Y; filter '$.Y.id contains $.X.name'; show X;	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Iot Hubs should exists\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name = 'azure-devices-iot-hub-resource' AND json.rule = type equals 'Microsoft.Devices/IotHubs' as X; config from cloud.resource where api.name = 'azure-devices-iot-hub-resource-diagnostic-settings' as Y; filter 'not($.Y.id contains $.X.name)'; show X; \",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  5.3:
    CloudType: "Azure"
    info: "\nEnsure logs in Virtual Machine Scale Sets should be enabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name = 'azure-virtual-machine-scale-set' AND json.rule = type equals 'Microsoft.Compute/virtualMachineScaleSets' and properties.virtualMachineProfile.extensionProfile.extensions[?none(properties.publisher equals 'Microsoft.AKS' or (properties.type equals 'IaaSDiagnostics' and properties.publisher equals 'Microsoft.Azure.Diagnostics') or (properties.type equals 'LinuxDiagnostic' and (properties.publisher equals 'Microsoft.OSTCExtensions' or properties.publisher equals 'Microsoft.Azure.Diagnostics')))] exists	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  6.1:
    CloudType: "Azure"
    info: "\nEnsure that RDP access is restricted from the internet\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name= 'azure-network-nsg-list' AND json.rule = securityRules[?any(access equals Allow and direction equals Inbound and (sourceAddressPrefix equals Internet or sourceAddressPrefix equals * or sourceAddressPrefix equals 0.0.0.0/0 or sourceAddressPrefix equals ::/0) and (destinationPortRange contains _Port.inRange(3389,3389) or destinationPortRanges[*] contains _Port.inRange(3389,3389) or destinationPortRange equals '*'))] exists	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "Yes"
  6.2:
    CloudType: "Azure"
    info: "\nEnsure that SSH access is restricted from the internet\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name= 'azure-network-nsg-list' AND json.rule = securityRules[?any(access equals Allow and direction equals Inbound and (sourceAddressPrefix equals Internet or sourceAddressPrefix equals * or sourceAddressPrefix equals 0.0.0.0/0 or sourceAddressPrefix equals ::/0) and (destinationPortRange contains _Port.inRange(22,22) or destinationPortRanges[*] contains _Port.inRange(22,22) or destinationPortRange equals '*'))] exists	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "Yes"
  6.3:
    CloudType: "Azure"
    info: "\nEnsure no SQL Databases allow ingress 0.0.0.0/0 (ANY IP)\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-sql-server-list' AND json.rule = ['sqlServer'].['properties.publicNetworkAccess'] equal ignore case Enabled and firewallRules[?any(startIpAddress equals '0.0.0.0' and endIpAddress equals '0.0.0.0')] exists	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "Yes"
  6.6:
    CloudType: "Azure"
    info: "\nAzure Network Security Group having Inbound rule overly permissive to all traffic on UDP protocol\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' and api.name= 'azure-network-nsg-list' AND json.rule = securityRules[?any((sourceAddressPrefix equals Internet or sourceAddressPrefix equals * or sourceAddressPrefix equals 0.0.0.0/0 or sourceAddressPrefix equals ::/0) and (protocol equals Udp or protocol equals *) and access equals Allow and direction equals Inbound)] exists or securityRules does not exist 	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "Yes"
  8.4:
    CloudType: "Azure"
    info: "\nEnsure the key vault is recoverable\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where api.name = 'azure-key-vault-list' AND json.rule = 'properties.enableSoftDelete does not exist or properties.enablePurgeProtection does not exist'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "Yes"
  9.10:
    CloudType: "Azure"
    info: "\nEnsure FTP deployments are disabled\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = config.ftpsState equals AllAllowed	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Native"
    Mandatory: "No"
  9.3:
    CloudType: "Azure"
    info: "\nEnsure web app is using the latest version of TLS encryption\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = 'type equals 'Microsoft.Web/sites' and kind does not contain functionapp and config.minTlsVersion does not equal 1.2'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  9.6:
    CloudType: "Azure"
    info: "\nEnsure that 'PHP version' is the latest, if used to run the function app\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = 'kind contains linux and kind contains functionapp and kind does not contain worklflowapp and (config.linuxFxVersion contains PHP or config.linuxFxVersion contains php) and config.linuxFxVersion does not contain 8.1'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  9.6:
    CloudType: "Azure"
    info: "\nEnsure that 'PHP version' is the latest, if used to run the web app\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = 'kind contains linux and kind does not contain functionapp and (config.linuxFxVersion contains PHP or config.linuxFxVersion contains php) and config.linuxFxVersion does not contain 8.1'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  9.7:
    CloudType: "Azure"
    info: "\nEnsure that 'Python version' is the latest, if used to run the function app\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = 'kind contains linux and kind contains functionapp and kind does not contain workflowapp and (config.linuxFxVersion contains python or config.linuxFxVersion contains PYTHON) and (config.linuxFxVersion does not contain 3.9 or config.linuxFxVersion does not contain 3.9)'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  9.7:
    CloudType: "Azure"
    info: "\nEnsure that 'Python version' is the latest, if used to run the web app\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = 'kind contains linux and kind does not contain functionapp and (config.linuxFxVersion contains python or config.linuxFxVersion contains PYTHON) and (config.linuxFxVersion does not contain 3.9 or config.linuxFxVersion does not contain 3.9)'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  9.8:
    CloudType: "Azure"
    info: "\nEnsure that 'Java version' is the latest, if used to run the function app\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = kind contains linux and kind does not contain functionapp and (config.linuxFxVersion contains JAVA or config.linuxFxVersion contains java) and config.linuxFxVersion does not contain 11	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  9.8:
    CloudType: "Azure"
    info: "\nEnsure that 'Java version' is the latest, if used to run the web app\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = kind contains linux and kind contains functionapp and kind does not contain workflowapp and (config.linuxFxVersion contains JAVA or config.linuxFxVersion contains java) and config.linuxFxVersion does not contain 11	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"
  9.9:
    CloudType: "Azure"
    info: "\nEnsure that 'HTTP Version' is the latest, if used to run the web app\n"
    rql1: "{\r\n  \"query\":\"config from cloud.resource where cloud.accountgroup = '%s' AND cloud.type = 'azure' AND api.name = 'azure-app-service' AND json.rule = 'type equals 'Microsoft.Web/sites' and kind contains functionapp and kind does not contain workflowapp and config.http20Enabled equals false'	\",\r\n  \"timeRange\":{\"type\":\"to_now\",\"value\":\"epoch\"},\r\n    \"heuristicSearch\":true\r\n}"
    rql2: ""
    display_on: "id"
    API: "Custom"
    Mandatory: "No"